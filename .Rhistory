prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
plot(prova$MFI)
plot(site_3035, add=TRUE)
document()
cellsize <- 2000
rast1 <- prova$MFI
e <- raster::extent(site_3035)
rast2 <- raster::extend(rast1, extent(e[1]-cellsize, e[2] + cellsize, e[3] - cellsize, e[4]+cellsize), value=0)
rast3 <- raster::mask(rast2, site_3035)
#see results
plot(rast2)
plot(site_3035, add=TRUE)
plot(rast3)
plot(site_3035, add=TRUE)
#see results
plot(rast2)
plot(site_3035, add=TRUE)
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
#see results
plot(rast2)
plot(site_3035, add=TRUE)
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
prova <- ignorance_map(datashort[1:4000,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
plot(prova$MFI)
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
e
document()
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
prova <- ignorance_map(datashort[1:500,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
prova <- ignorance_map(datashort[1:30000,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
ved <- raster::rasterize(datashort[1:100,], r, 'Taxon', function(x, ...) length(unique(na.omit(x))))
ved <- raster::rasterize(datashort[1:100,], rast1, 'Taxon', function(x, ...) length(unique(na.omit(x))))
document()
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
document()
prova <- ignorance_map(datashort[1:100,], site, 2020, excl_areas=exclareas, 2000, 3035, 20)
sessionInfo()
options(defaultPackages = NULL)
ignorance_map(datashort[1:1000,], site, 2020, excl_areas = exclareas, 3035, 20, 10000)
library(ignobioR)
ignorance_map(datashort[1:1000,], site, 2020, excl_areas = exclareas, 3035, 20, 10000)
virtual_list(datashort[1:1000,], site, 2020, excl_areas=exclareas, 3035, 20, 20)
vfl <- virtual_list(datashort[1:1000,], site, 2020, excl_areas=exclareas, 3035, 20, 20)
ignorance_map(datashort[1:1000,], site, 2020, excl_areas = exclareas, 3035, 20, 10000)
virtual_list
vfl <- virtual_list(data_flor=datashort[1:1000,], site = site, year= 2020, CRS.new= 3035, tau=20, upperlimit=20)
vfl <- virtual_list(data_flor=datashort[1:1000,], site = site, year= 2020, CRS.new= 3035, tau=20)
Sys.Date()
Sys.Date(year)
Sys.Date("%a")
year_study <- Sys.Date(%a)
year_study <- Sys.Date()
substr(year_study, start = 1, stop = 4)
library(ignobioR)
library(ignobioR)
library(ignobioR)
virtual_list(data_flor = datashort[1:1000,], site=site, tau = 20)
ignorance_map(data_flor = datashort[1:10,], site=site, 20, 1000)
data("datashort")
data_flor <- datashort
year_study <- 2020
year_study <- NULL
if (length(year_study) ==0)
{
year_study <- Sys.Date()
year_study <- as.numeric(substr(year_study, start = 1, stop = 4))
}
year_study
if (max(data_flor$year) > year_study)
{
stop("Some occurrence dates are more recent than the year of the study")
}
year_study <- 3020
if (max(data_flor$year) > year_study)
{
stop("Some occurrence dates are more recent than the year of the study")
}
year_study <- 2000
if (max(data_flor$year) > year_study)
{
stop("Some occurrence dates are more recent than the year of the study")
}
data_flor
ignorance_map(data_flor=datashort, site=site, year_study=NULL, 20, 2000)
ignorance_map(data_flor=datashort, site=site, year_study=NULL, tau=20, cellsize=2000)
ignorance_map(data_flor=datashort[1:100,], site=site, year_study=NULL, tau=20, cellsize=2000)
ignorance_map(data_flor=datashort[1:100,], site=site, year_study=2020, tau=20, cellsize=2000)
ignorance_map(data_flor=datashort[1:100,], site=site, year_study=1980, tau=20, cellsize=2000)
ignorance_map(data_flor=datashort[1:100,], site=site, tau=20, cellsize=2000)
library(ignobioR)
ignorance_map(data_flor=datashort[1:100,], site=site, tau=20, cellsize=2000)
# Install release version from CRAN
install.packages("pkgdown")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
Use pkgdown to update your website:
# Run to build the website
pkgdown::build_site()
ignorance_map(data_flor=datashort[1:100,], site=site, tau=20, cellsize=2000)
library(ignobioR)
ignorance_map(data_flor=datashort[1:100,], site=site, tau=20, cellsize=2000)
virtual_list(data_flor=datashort[1:100,], site=site, tau=20)
virtual_list(data_flor=datashort, site=site, excl_areas=exclareas, CRS.new=3035, tau=30, upperlimit=25)}
virtual_list(data_flor=datashort, site=site, excl_areas=exclareas, CRS.new=3035, tau=30, upperlimit=25)
vfl
vfl <- virtual_list(data_flor=datashort[1:100,], site=site, excl_areas=exclareas, CRS.new=3035, tau=30, upperlimit=25)
output2 <- vfl$VFL
output3 <- output2[order(-output2$Estimated_Spatiotemporal_probability, -output2$Max_probability, output2$taxon),]
output3
output3 <- output2[order(output2$taxon, -output2$Estimated_Spatiotemporal_probability, -output2$Max_probability),]
output3
vfl <- virtual_list(data_flor=datashort[1:1000,], site=site, excl_areas=exclareas, CRS.new=3035, tau=30, upperlimit=25)
vfl$VFL
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
devtools::document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
document()
devtools::document()
floratus <- read.csv("C:/Users/MARCO/Dropbox/Dottorato/Pubblicazioni mie/Paper 3 - Ignorance Map/SUBMISSION PACK_TAXON/MATERIALE VARIO/Ignorance-master_OK/Ignorance-master/2a) short_example.csv")
View(floratus)
vfl <- virtual_list(data_flor=floratus[1:10000,], site=park, excl_areas=unsuitablezone, CRS.new=3035, tau=30, upperlimit=25)
DDF_buffer <- rgeos::gBuffer(floratus, width=(floratus$uncertainty), byid=TRUE)
xy <- floratus[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = floratus,
proj4string = ttt)
prova <- rgeos::gBuffer(, width=(data_flor_planar$uncertainty), byid=TRUE)
prova <- rgeos::gBuffer(data_flor_planar, width=(data_flor_planar$uncertainty), byid=TRUE)
plot(prova)
sp::plot(prova)
data_flor_planar
prova <- rgeos::gBuffer(data_flor_planar, width=uncertainty, byid=TRUE)
prova <- rgeos::gBuffer(data_flor_planar, width=uncertainty, byid=TRUE)
prova <- rgeos::gBuffer(data_flor_planar, width=data_flor_planar$uncertainty, byid=TRUE)
sp::plot(prova)
data_flor_planar
pc <- spTransform(data_flor_planar, CRS( "+init=epsg:3035" ) )
pc <- sp::spTransform(data_flor_planar, CRS( "+init=epsg:3035" ) )
library(sp)
library(raster)
xy <- floratus[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = floratus,
proj4string = ttt)
pc <- sp::spTransform(data_flor_planar, CRS( "+init=epsg:3035" ) )
xy <- floratus[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = floratus,
proj4string = ttt)
data_flor_planar <- sp::spTransform(data_flor_planar, CRS( "+init=epsg:3035" ) )
prova <- rgeos::gBuffer(data_flor_planar, width=data_flor_planar$uncertainty, byid=TRUE)
sp::plot(prova)
site_3035 <- sp::spTransform(site, CRS( "+init=epsg:3035" ) )
site_3035 <- sp::spTransform(park, CRS( "+init=epsg:3035" ) )
result <- raster::intersect(data_flor_planar, site_3035)
plot(result)
DDF_buffer
result <- raster::intersect(data_flor_planar, site_3035)
result
result <- raster::intersect(data_flor_planar, site_3035)
plot(result)
plot(site_3035, add=TRUE)
sp::plot(prova)
Devo subsettare con il vettore result il dataframe prova (quelllo coi buffer)
result <- raster::intersect(prova, site_3035)
plot(result)
plot(site_3035, add=TRUE)
data_flor_planar
prova$record <- 1:nrow(site_3035)
head(prova)
nrow(site_3035)
xy <- floratus[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = floratus,
proj4string = ttt)
data_flor_planar <- sp::spTransform(data_flor_planar, CRS( "+init=epsg:3035" ) )
site_3035 <- sp::spTransform(park, CRS( "+init=epsg:3035" ) )
prova$record <- 1:nrow(data_flor_planar)
head(prova)
data(park)
data_flor_planar
data(park)
site_3035 <- sp::spTransform(park, CRS( "+init=epsg:3035" ) )
xy <- floratus[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = floratus,
proj4string = ttt)
data_flor_planar$record <- 1:nrow(data_flor_planar)
data(park)
site_3035 <- sp::spTransform(park, CRS( "+init=epsg:3035" ) )
xy <- floratus[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = floratus,
proj4string = ttt)
data_flor_planar <- sp::spTransform(data_flor_planar, CRS( "+init=epsg:3035" ) )
data_flor_planar$record <- 1:nrow(data_flor_planar)
data_flor_planar
data_flor_planar$record <- 1:nrow(data_flor_planar)
head(data_flor_planar)
empty <- prova[prova$record = data_flor_planar$record,]
empty <- prova[prova$record == data_flor_planar$record,]
plot(empty)
prova$record
result
result <- raster::intersect(prova, site_3035)
result
empty <- prova[prova$record == result$record,]
result$record
empty <- prova[prova$record = result$record,]
empty <- prova[prova$record == result$record,]
filter_buffer <- result$record
empty <- prova[prova$record == filter_buffer,]
plot(empty)
prova$record
filter_buffer
empty2 <- prova[result, ]
plot(empty2)
plot(site_3035, add=TRUE)
document()
library(devtools)
document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
empty
rm(empty)
empty
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
document()
mfi <- ignorance_map(data_flor=floratus[1:1000,], site=park, tau=20, cellsize=2000)
mfi <- ignorance_map(data_flor=floratus[1:5000,], site=park, tau=20, cellsize=2000)
xy
rm(xy)
data_flor_planar
rm(data_flor_planar)
mfi <- ignorance_map(data_flor=floratus[1:500,], site=park, tau=20, cellsize=2000)
site <- park
data_flor <- floratus[1:500,]
start_time <- Sys.time() ## starting time
raster::crs(site) <- sp::CRS("+init=epsg:4326")
CRS.new <- paste0("+init=epsg:", CRS.new)
print(paste0("Chosen Coordinate Reference System:", " ", CRS.new))
print(paste0("Chosen tau:", " ", tau))
CRS.new <- 3035
start_time <- Sys.time() ## starting time
raster::crs(site) <- sp::CRS("+init=epsg:4326")
CRS.new <- paste0("+init=epsg:", CRS.new)
print(paste0("Chosen Coordinate Reference System:", " ", CRS.new))
print(paste0("Chosen tau:", " ", tau))
tau <-30
start_time <- Sys.time() ## starting time
raster::crs(site) <- sp::CRS("+init=epsg:4326")
CRS.new <- paste0("+init=epsg:", CRS.new)
print(paste0("Chosen Coordinate Reference System:", " ", CRS.new))
print(paste0("Chosen tau:", " ", tau))
data_flor_planar <- data_flor
data_flor_planar$record <- 1:nrow(data_flor_planar)
xy <- data_flor_planar[,c(2,3)]
ttt <- sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = data_flor_planar, proj4string = ttt)
data_flor_planar <- sp::spTransform(data_flor_planar, CRS.new)
points_3035 <- data_flor_planar
site_3035 <- sp::spTransform(site, CRS.new)
print("ok1")
data_flor_planar$lat <- data_flor_planar@coords[,2]
data_flor_planar$long <- data_flor_planar@coords[,1]
data_flor_planar <- sp::spTransform(data_flor_planar, CRS.new)
CRS.new
data_flor_planar
data_flor_planar <- sp::spTransform(data_flor_planar, CRS.new)
library(rgdal)
data_flor_planar <- sp::spTransform(data_flor_planar, CRS.new)
data_flor_planar
CRS.new
library(sp)
data_flor_planar <- sp::spTransform(data_flor_planar, CRS.new)
data_flor_planar
data_flor_planar <- sp::spTransform(data_flor_planar, CRS.new)
points_3035 <- data_flor_planar
site_3035 <- sp::spTransform(site, CRS.new)
document()
empoli
wiki <- read.csv("C:/Users/MARCO/Google Drive/Lavori UniPI/Wikiplantbase dataset/Wiki_ago2020_ignorance.csv")
View(wiki)
comuni <- readOGR(dsn = 'c:/Users/MARCO/Desktop/CANCELLARE/ambiti_amministrativi/ambiti_amministrativi_34780f28e0740c485ca9e4db4d88e346', layer = 'am_com_multipart')
crs(comuni) <- CRS("+init=epsg:3003")
plot(comuni)
empoli <- comuni[comuni$NOME == "EMPOLI", ]
plot(empoli)
library(rgdal)
library(raster)
library(rgeos)
comuni <- readOGR(dsn = 'c:/Users/MARCO/Desktop/CANCELLARE/ambiti_amministrativi/ambiti_amministrativi_34780f28e0740c485ca9e4db4d88e346', layer = 'am_com_multipart')
crs(comuni) <- CRS("+init=epsg:3003")
plot(comuni)
empoli <- comuni[comuni$NOME == "EMPOLI", ]
plot(empoli)
site <- empoli
site_3003 <- site
plot(site_3003)
CRS.new <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
empoli <- spTransform(site_3003, CRS.new)
empoli
prova2 <- ignorance_map(
wiki,
empoli,
2020,
excl_areas = NULL,
3035,
20,
cellsize=2000
)
library(ignobioR)
prova <- virtual_list(
floratus[1:1000,],
park,
2020,
excl_areas = NULL,
3035,
20,
20
)
prova2 <- ignorance_map(
wiki,
empoli,
2020,
excl_areas = NULL,
3035,
20,
cellsize=2000
)
prova2 <- ignorance_map(
floratus,
park,
2020,
excl_areas = NULL,
3035,
20,
cellsize=5000
)
prova2 <- ignorance_map(
floratus[1:1000,],
park,
2020,
excl_areas = NULL,
3035,
20,
cellsize=5000
)
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus, site=park, tau=20) # draft the Virtual floristic List
document()
library(devtools)
document()
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
warnings()
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:3000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:5000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:5000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:5000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:5000,], unsuitablezone=unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
unsuitablezone
vfl <- virtual_list(data_flor=floratus[1:5000,], excl_areas = =unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:5000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
##### Build the Vignette
build_vignettes(
pkg = ".",
dependencies = "VignetteBuilder",
clean = TRUE,
upgrade = "never",
quiet = TRUE,
install = TRUE,
keep_md = TRUE
)
##### COSTRUIRE IL SITO INTERNET
# Install release version from CRAN
library("pkgdown")
# Run once to configure your package to use pkgdown usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("pkgdown")
# Run once to configure your package to use pkgdown usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()

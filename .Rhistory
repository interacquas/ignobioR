comuni <- readOGR(dsn = 'c:/Users/MARCO/Desktop/CANCELLARE/ambiti_amministrativi/ambiti_amministrativi_34780f28e0740c485ca9e4db4d88e346', layer = 'am_com_multipart')
crs(comuni) <- CRS("+init=epsg:3003")
plot(comuni)
empoli <- comuni[comuni$NOME == "EMPOLI", ]
plot(empoli)
library(rgdal)
library(raster)
library(rgeos)
comuni <- readOGR(dsn = 'c:/Users/MARCO/Desktop/CANCELLARE/ambiti_amministrativi/ambiti_amministrativi_34780f28e0740c485ca9e4db4d88e346', layer = 'am_com_multipart')
crs(comuni) <- CRS("+init=epsg:3003")
plot(comuni)
empoli <- comuni[comuni$NOME == "EMPOLI", ]
plot(empoli)
site <- empoli
site_3003 <- site
plot(site_3003)
CRS.new <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
empoli <- spTransform(site_3003, CRS.new)
empoli
prova2 <- ignorance_map(
wiki,
empoli,
2020,
excl_areas = NULL,
3035,
20,
cellsize=2000
)
library(ignobioR)
prova <- virtual_list(
floratus[1:1000,],
park,
2020,
excl_areas = NULL,
3035,
20,
20
)
prova2 <- ignorance_map(
wiki,
empoli,
2020,
excl_areas = NULL,
3035,
20,
cellsize=2000
)
prova2 <- ignorance_map(
floratus,
park,
2020,
excl_areas = NULL,
3035,
20,
cellsize=5000
)
prova2 <- ignorance_map(
floratus[1:1000,],
park,
2020,
excl_areas = NULL,
3035,
20,
cellsize=5000
)
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus, site=park, tau=20) # draft the Virtual floristic List
document()
library(devtools)
document()
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
warnings()
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:3000,], site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:5000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:5000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:5000,], site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:5000,], unsuitablezone=unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
unsuitablezone
vfl <- virtual_list(data_flor=floratus[1:5000,], excl_areas = =unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:5000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,
site=park, tau=20) # draft the Virtual floristic List
##### Build the Vignette
build_vignettes(
pkg = ".",
dependencies = "VignetteBuilder",
clean = TRUE,
upgrade = "never",
quiet = TRUE,
install = TRUE,
keep_md = TRUE
)
##### COSTRUIRE IL SITO INTERNET
# Install release version from CRAN
library("pkgdown")
# Run once to configure your package to use pkgdown usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("pkgdown")
# Run once to configure your package to use pkgdown usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
mfi <-  ignorance_map(data_flor= floratus, excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
mfi <-  ignorance_map(data_flor= floratus, excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
mfi <-  ignorance_map(data_flor= floratus, excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
detach("package:ignobioR", unload=TRUE)
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
mfi <-  ignorance_map(data_flor= floratus[1:1000,], excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
vfl <- virtual_list(data_flor=floratus, excl_areas = unsuitablezone,
site=park, tau=20)
vfl$VFL
head(vfl$VFL)
head(vfl$VFL)
vfl$VFL[1:10,]
min(vfl$VFL$Estimated_Spatiotemporal_probability)
vfl$VFL[vfl$VFL$Estimated_Spatiotemporal_probability=0.2,]
vfl$VFL[vfl$VFL$Estimated_Spatiotemporal_probability==0.2,]
vfl$VFL[vfl$VFL$Estimated_Spatiotemporal_probability==100,]
mrow(vfl$VFL[vfl$VFL$Estimated_Spatiotemporal_probability==100,])
nrow(vfl$VFL[vfl$VFL$Estimated_Spatiotemporal_probability==100,])
nrow(vfl$VFL)
document()
mfi <-  ignorance_map(data_flor= floratus, excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
mfi <-  ignorance_map(data_flor= floratus[1:500,], excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
CRS.new <- 3035
start_time <- Sys.time() ## starting time
rgdal::set_thin_PROJ6_warnings(TRUE)
raster::crs(site) <- sp::CRS("+init=epsg:4326")
CRS.new <- paste0("+init=epsg:", CRS.new)
message()
message("##############################################################################################")
message("Please be patient. The process can be very slow, dependeing on the amount of records provided")
message("##############################################################################################")
message()
message(paste0("Chosen Coordinate Reference System:", " ", CRS.new))
message(paste0("Chosen tau:", " ", tau))
tau <- 20
excl_areas <- unsuitablezone
site <- park
if(is.null(excl_areas)==TRUE)
{message("No unsuitable areas provided")
cont <- 0} else {message("Unsuitable areas provided. Plotting")
sp::plot(excl_areas, col=rgb(1,0,0, 0.2), main="Unsuitable areas")
sp::plot(site, border="black", lty=2, lwd=2, add=TRUE)
cont <- 1}
data_flor_planar <- data_flor
data_flor <- floratus[1:500,]
data_flor_planar <- data_flor
data_flor_planar$record <- 1:nrow(data_flor_planar)
xy <- data_flor_planar[,c(2,3)]
ttt <- sp::CRS("+init=epsg:4326")
data_flor_planar <- sp::SpatialPointsDataFrame(coords = xy, data = data_flor_planar, proj4string = ttt)
if(cont==1)
{
raster::crs(excl_areas) <- sp::CRS("+init=epsg:4326")
# Crop the study area shapefile using unsuitable areas
excl_areas <- raster::crop(excl_areas, raster::extent(data_flor_planar))
excl_areas_3035 <- sp::spTransform(excl_areas, "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs") # conversion to new CRS
}
data_flor_planar <- sp::spTransform(data_flor_planar, "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs")
points_3035 <- data_flor_planar
site_3035 <- sp::spTransform(site, "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs")
data_flor_planar$lat <- data_flor_planar@coords[,2]
data_flor_planar$long <- data_flor_planar@coords[,1]
ttt
if(cont==1)
{
raster::crs(excl_areas) <- sp::CRS("+init=epsg:4326")
# Crop the study area shapefile using unsuitable areas
excl_areas <- raster::crop(excl_areas, raster::extent(data_flor_planar))
excl_areas_3035 <- sp::spTransform(excl_areas, "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs") # conversion to new CRS
}
data_flor_planar <- sp::spTransform(data_flor_planar, "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs")
points_3035 <- data_flor_planar
site_3035 <- sp::spTransform(site, "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs")
data_flor_planar$lat <- data_flor_planar@coords[,2]
data_flor_planar$long <- data_flor_planar@coords[,1]
site_3035
CRS.new
excl_areas_3035 <- sp::spTransform(excl_areas, CRS.new) # conversion to new CRS
data_flor_buffer <- rgeos::gBuffer(data_flor_planar, width=(data_flor_planar$uncertainty), byid=TRUE)
result <- raster::intersect(data_flor_buffer, site_3035)
DF <- as.data.frame(result)
points_INS <- raster::intersect(points_3035, site_3035)
# Create a vector with taxa present in the input dataframe
list <- unique(DF$Taxon)
list <- as.vector(list)
# Create an empty raster
message("Creating an empty raster")
filter_buffer <- result$record
empty <- data_flor_buffer[filter_buffer, ]
r <- raster::raster()
raster::xmin(r) <- min(empty@bbox[1,1]) - max(data_flor$uncertainty)
raster::xmax(r) <- max(empty@bbox[1,2]) + max(data_flor$uncertainty)
raster::ymin(r) <- min(empty@bbox[2,1]) - max(data_flor$uncertainty)
raster::ymax(r) <- max(empty@bbox[2,2]) + max(data_flor$uncertainty)
raster::res(r) <- cellsize
raster::crs(r) <- raster::crs(site_3035) # ho modificato questa riga, controllare
raster::values(r) <- 1:raster::ncell(r)
r2 <- r
r2[]<-NA
cellsize <- 2000
r <- raster::raster()
raster::xmin(r) <- min(empty@bbox[1,1]) - max(data_flor$uncertainty)
raster::xmax(r) <- max(empty@bbox[1,2]) + max(data_flor$uncertainty)
raster::ymin(r) <- min(empty@bbox[2,1]) - max(data_flor$uncertainty)
raster::ymax(r) <- max(empty@bbox[2,2]) + max(data_flor$uncertainty)
raster::res(r) <- cellsize
raster::crs(r) <- raster::crs(site_3035) # ho modificato questa riga, controllare
raster::values(r) <- 1:raster::ncell(r)
r2 <- r
r2[]<-NA
message("Calculating species richness per cell")
rich <- raster::rasterize(data_flor_planar, r, 'Taxon', function(x, ...) length(unique(na.omit(x))))
rich[is.na(rich)] <- 0
message("Preparing preliminary data to draft the Map of Floristic Ignorance")
included_species <- GISTools::poly.counts(data_flor_planar, site_3035)
number_included_species <- max(included_species)
TA2<- sp::geometry(data_flor_planar)
sapply(sp::over(site_3035, TA2, returnList = FALSE), length)
filter_buffer <- result$record
empty <- data_flor_buffer[filter_buffer, ]
sp::plot(site_3035, lwd=2,main="Intersecting buffers")
sp::plot(empty, border="black", col=rgb(0,0,1, 0.1), add=TRUE, lty=2)
sp::plot(site_3035, lwd=0.01, main= "Intersecting buffers (Area of exclusion considered)")
sp::plot(rgeos::gDifference(empty, excl_areas_3035, byid=TRUE), border="black", col=rgb(0,0,1, 0.1), add=TRUE, lty=2)
sp::plot(site_3035, lwd=2, border="red", main="Intersecting buffers (Area of exclusion considered)", add=TRUE)
mfi <-  ignorance_map(data_flor= floratus[1:500,], excl_areas= unsuitablezone,site=park, tau= 20, cellsize= 1000)
library(tidyverse)
library(reshape2)
library(readxl)
library(splitstackshape)
library(vegan)
library(ggplot2)
##### carico il dataframe specie con nome df
df <- read_excel("C:/Users/MARCO/Documents/Tesi laureandi/Giuseppe Antonelli/specie-per-plot_coord.xlsx", sheet = "plots")
df <- as.data.frame(df)
df
df <- read_excel("C:/Users/MARCO/Documents/Tesi laureandi/Giuseppe Antonelli/specie-per-plot_coord.xlsx", sheet = "plots")
df <- as.data.frame(df)
df_coord <- read_excel("C:/Users/MARCO/Documents/Tesi laureandi/Giuseppe Antonelli/specie-per-plot_coord.xlsx",
sheet = "coordinates")
df_coord <- as.data.frame(df_coord)
df_coord
#####  creo un dataframe 'presenza-assenza'
df2 <- df %>% gather(Plot, Species) %>%
filter(!is.na(Species)) %>%
mutate(value = 1) %>%
dcast(Plot~Species, value.var = "value", fill = 0)
df2
centroid_pattern <- function (z, longlat) {
centroid <- function (x) {
return(c(X = mean(x$X), Y =mean(x$Y)))
}
dist_1 <- function (p1, p2) {
return(sqrt((p2['X'] - p1['X'])^2+ (p2['Y'] - p1['Y'])^2))
}
require(sp)
if (longlat== TRUE) {
xy <- z[,c(2,3)]
colnames(xy) <- c("X", "Y")
centroiddata <- SpatialPointsDataFrame(coords = xy, data = z, proj4string = CRS("+init=epsg:4326"))
centroiddata <- spTransform(centroiddata,CRS("+init=epsg:3035"))
centroiddata <- cbind(as.character(centroiddata@data$ID), centroiddata@coords)
centroiddata <- as.data.frame(centroiddata)
centroiddata$X <- as.numeric(as.numeric(as.character(centroiddata$X)))
centroiddata$Y <- as.numeric(as.numeric(as.character(centroiddata$Y)))
colnames(centroiddata) <- c("ID", "X", "Y")
z <- centroiddata
}
supersequence <- c()
for(j in 1:nrow(z)) {
df_filter <- c(j)
df_nofilter <- (1:nrow(z))[-df_filter]
df_centre <- centroid(z[df_filter,])
distance_vector <- c()
sequence_vector <- as.character(z$ID[df_filter])
while(length(df_nofilter>0)) {
for (i in 1:length(df_nofilter)) {
distance_vector <- c(distance_vector, dist_1(df_centre, z[df_nofilter[i],]))
distance_vector <- unlist(distance_vector, use.names=FALSE)
}
print(paste("Minimum distance",min(distance_vector)))
md <- which(distance_vector==min(distance_vector))
print(paste("Index of distance_vector:",md))
print(paste("Corresponding to pointdata Index",df_nofilter[md]))
print(paste("Nearest point:",z$ID[df_nofilter[md]]))
sequence_vector <- c(sequence_vector,as.character(z$ID[df_nofilter[md]]))
distance_vector <- c()
df_filter <- c(df_filter,df_nofilter[md])
df_nofilter <- (1:nrow(z))[-df_filter]
df_centre <- centroid(z[df_filter,])
}
supersequence <- c(supersequence,sequence_vector)
}
seqmatrix <- matrix(supersequence,ncol = nrow(z),byrow = TRUE)
seqmatrix <- as.data.frame(seqmatrix)
colnames(seqmatrix) <- c("Plot", 1:(nrow(z)-1))
return(seqmatrix)
}
mxp_all <- centroid_pattern(df_coord, longlat = TRUE)
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone, CRS.new=3035, site=park, tau=20) # draft the Virtual floristic List
mfi <-  ignorance_map(data_flor= floratus[1:1000,], CRS.new=3035, excl_areas= unsuitablezone,site=park, tau= 80, cellsize= 2000)
document()
document()
document()
document()
document()
document()
document()
document()
document()
docuemnt()
document()
document()
document()
document()
document()
document()
sessionInfo
sessionInfo()
document()
document()
document()
document()
info(rgeos)
rgeos
document()
document()
library(rgeos)
document()
document()
library(sp)
sp
document()
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR"
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
library(ignobioR)
data(floratus)
floratus
data(park)
data(unsuitablezone)
head(floratus)
document()
document()
document()
document()
document()
library(testthat)
check()
ignorance_map(data_flor = floratus, excl_areas = unsuitablezone, CRS.new = 3035, site = park, tau= 20, cellsize = 1000)
ignorance_map(data_flor = floratus, excl_areas = unsuitablezone, CRS.new = 3035, site = park, tau= 20, cellsize = 1000)
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
ignorance_map(data_flor = floratus, excl_areas = unsuitablezone, CRS.new = 3035, site = park, tau= 20, cellsize = 1000)
if(!require(devtools)){install.packages("devtools"); library(devtools)}
install_github("interacquas/ignobioR")
library(devtools)
# Creo la vignette
build_vignettes(
pkg = ".",
dependencies = "VignetteBuilder",
clean = TRUE,
upgrade = "never",
quiet = TRUE,
install = TRUE,
keep_md = TRUE
)
pkgdown::build_site(new_process=TRUE)
library(ignobioR)
data(floratus)
data(park)
data(unsuitablezone)
head(floratus)
mfi <-  ignorance_map(data_flor= floratus[1:1000,], CRS.new=3035, excl_areas= unsuitablezone,site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:1000,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:1000,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
document()
mfi <-  ignorance_map(data_flor= floratus[1:100,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:500,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
document()
mfi <-  ignorance_map(data_flor= floratus[1:500,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:500,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
document()
mfi <-  ignorance_map(data_flor= floratus[1:500,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:500,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:1000,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
mfi <-  ignorance_map(data_flor= floratus[1:1000,], CRS.new=3035, site=park, tau= 80, cellsize= 2000)
document()
vfl <- virtual_list(data_flor=floratus[1:1000,], excl_areas = unsuitablezone,  site=park, tau=20) # draft the Virtual floristic List
mfi <-  ignorance_map(data_flor= floratus[1:1000,],  site=park, tau= 80, cellsize= 2000)

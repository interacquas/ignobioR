site = park,
tau = 20,
cellsize = 5000
)
devtools::load_all(".")
mrfi_ext <- ignorance_map_mod(
data_flor = floratus,
site = park,
tau = 20,
cellsize = 5000
)
mrfi_ext <- ignorance_map_mod(
data_flor = floratus,
site = park,
tau = 20,
cellsize = 1000
)
mrfi_ext <- ignorance_map_mod(
data_flor = floratus,
site = park,
tau = 20,
cellsize = 1000
)
devtools::load_all(".")
# Run both functions first
old <- ignorance_map(data_flor, site, tau = 20, cellsize = 2000)
# Run both functions first
old <- ignorance_map(floratuss, site, tau = 20, cellsize = 2000)
devtools::load_all(".")
# Run both functions first
old <- ignorance_map(floratuss, site, tau = 20, cellsize = 2000)
old <- ignorance_map(floratus, site, tau = 20, cellsize = 2000)
new <- ignorance_map_mod(floratus, site, tau = 20, cellsize = 2000)
old <- ignorance_map(data=floratus, site=park, tau = 20, cellsize = 2000)
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 2000)
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 5000)
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 10000)
library(terra)
library(sf)
# site_proj: sf polygon in target CRS
# r_template: terra::rast template (same CRS, resolution)
site_vect <- terra::vect(site_proj)
devtools::load_all(".")
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 2000)
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 2000)
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 5000)
new <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 500)
library(terra)
site_vect <- vect("~/Progetti/MSRM/test ignobioR/prova-segnalaz-msrm.shp")
plot(site_vect)
remove(site_vect)
msrm_data <- vect("~/Progetti/MSRM/test ignobioR/prova-segnalaz-msrm.shp")
plot(msrm_data)
new <- ignorance_map_mod(data=msrm_data, site=park, tau = 20, cellsize = 2000)
names(msrm_data)[names(msrm_data) == "uncertaint"] <- "uncertainty"
new <- ignorance_map_mod(data=msrm_data, site=park, tau = 20, cellsize = 2000)
new <- ignorance_map_mod(data=msrm_data, site=park, tau = 20, cellsize = 1000)
library(terra); library(dplyr)
# assuming your modern output is mrfi_mod (list returned by ignorance_map_mod)
mrfi <- mrfi_mod$MRFI
new <- ignorance_map_mod(data=msrm_data, site=park, tau = 20, cellsize = 1000)
tsr_data <- vect("~/progetti/MSRM/GIS_OGU/TSR-borders.shp")
plot(msrm_data)
plot(tsr_borders)
plot(tsr_data)
new <- ignorance_map_mod(data=msrm_data, site=tsr_data, tau = 20, cellsize = 1000)
plot(tsr_borders)
plot(tsr_data)
tsr_data
new <- ignorance_map_mod(data=msrm_data, site=tsr_data, tau = 20, cellsize = 1000)
tsr_data <- terra::vect("~/progetti/MSRM/GIS_OGU/TSR-borders.shp")
tsr_data
plot(tsr_data)
tsr_data <- terra::vect("~/progetti/MSRM/GIS_OGU/TSR-borders.shp")
new <- ignorance_map_mod(data=msrm_data, site=tsr_data, tau = 20, cellsize = 1000)
tsr_data <- terra::vect("~/progetti/MSRM/GIS_OGU/TSR-borders.shp")
plot(tsr_data)
new <- ignorance_map_mod(data=msrm_data, site=tsr_data, tau = 20, cellsize = 1000)
library(sf) # Ensure sf is loaded
# Load the shapefile directly into an sf object
tsr_data <- sf::st_read("~/progetti/MSRM/GIS_OGU/TSR-borders.shp")
# Now run the function
new <- ignorance_map_mod(data=msrm_data, site=tsr_data, tau = 20, cellsize = 1000)
library(sf) # Ensure sf is loaded
# Load the shapefile directly into an sf object
tsr_data <- sf::st_read("~/progetti/MSRM/GIS_OGU/TSR-borders.shp")
# Now run the function
new <- ignorance_map_mod(data=floratus, site=tsr_data, tau = 20, cellsize = 1000)
PT_data <- sf::st_read("~/Progetti/MSRM/test ignobioR/segnalaz-PT.shp")
PT_borders <- sf::st_read("~/Progetti/MSRM/test ignobioR/comuni-PT.shp")
new <- ignorance_map_mod(data=PT-data, site=PT_borders, tau = 20, cellsize = 5000)
new <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 5000)
PT_data <- sf::st_read("~/Progetti/MSRM/test ignobioR/segnalaz-PT.shp")
names(PT_data)[names(PT_data) == "uncertaint"] <- "uncertainty"
new <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 5000)
new <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 1000)
devtools::load_all(".")
PT_borders <- sf::st_read("~/Progetti/MSRM/test ignobioR/comuni-PT.shp")
PT_data <- sf::st_read("~/Progetti/MSRM/test ignobioR/segnalaz-PT.shp")
igno_pt <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 1000)
names(PT_data)[names(PT_data) == "uncertaint"] <- "uncertainty"
igno_pt <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 1000)
igno_pt <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 1000)
igno_pt <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 2000)
igno_pt <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 5000)
igno_pt <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 1000)
igno_pt <- ignorance_map_mod(data=PT_data, site=PT_borders, tau = 20, cellsize = 2000)
igno_msrm <- ignorance_map_mod(data=floratus, site=park, tau = 20, cellsize = 1000)
igno_msrm <- ignorance_map_mod(data_flor=floratus, site=park, tau = 20, cellsize = 2000)
devtools::load_all(".")
ignorance_map_mod(data_flor=floratus, site=park, tau=20, cellsize=2000)
devtools::document()   # creates/updates NAMESPACE and man/
# load_working_functions.R
source("R/ignorance_map_mod.R")
source("R/virtual_list_mod.R")
virtual_list_mod(data_flor=floratus, site=park, tau=20)
floratus
head(floratus)
ignorance_map_mod(data_flor=floratus, site=park, tau=20, cellsize=10000)
# load_working_functions.R
source("R/floratus.R")
source("R/park.R")
virtual_list_mod(data_flor=floratus, site=park, tau=20, cellsize=20000)
virtual_list_mod(data_flor=floratus, site=park, tau=20)
head(floratus)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list = c("ignorance_map_mod"))
devtools::load_all(".")
virtual_list_mod(data_flor=floratus, site=park, tau=20)
devtools::load_all(".")
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus[1:1000, ],
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000
)
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000
)
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000,
use_edge_buffer = FALSE
)
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000,
use_edge_buffer = FALSE
)
install.packages("renv")
library(renv)
devtools::load_all(".")
# Test 1: Permissive with exclusion
mrfi_test1 <- ignorance_map_mod(
data_flor = floratus,
site = park,
excl_areas = unsuitablezone,
tau = 20,
cellsize = 2000,
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park_sf,
tau = 30,
upperlimit = 25
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 30,
upperlimit = 25
)
load("~/R projects/ignobioR/data/floratus.rda")
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 30,
upperlimit = 25
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 30,
upperlimit = 10
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10,
use_parallel = FALSE # <--- Set this to FALSE
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10,
use_parallel = FALSE # <--- Set this to FALSE
)
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
# 1. Load the future package (if not already loaded)
library(future)
# 2. **FORCE SEQUENTIAL PROCESSING**
# This instruction is executed BEFORE the function call.
# It tells the 'future' package to use the simple, stable, single-core plan.
future::plan(future::sequential)
print("Future plan set to sequential. Running stably on a single core.")
# 3. Call the function (without use_parallel argument)
# It will use the sequential plan set above.
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
devtools::load_all(".")
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
devtools::load_all(".")
devtools::load_all(".")
vfl <- virtual_list_mod(
data_flor = floratus,
site = park,
tau = 20,
upperlimit = 10
)
library(terra)
ndvi_example <- rast("~/ndvi-msrm.tif")
usethis::use_data(ndvi_example, overwrite = TRUE)
ndvi_example
plot(ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi <- ignorance_map_mod(
data_flor = floratus,
site = park,
tau = 20,
cellsize = 2000
)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
crs(ndvi_example)
crs(mrfi)
crs(mrfi) <- crs(ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi$MRFI,  # ← still the old CRS!
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproh,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 1000
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
install.packages("spstat.explore")
install.packages("spatstat.explore")
library(spatstat.explore)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
mrfi_reproj <- terra::project(mrfi$MRFI, ndvi_example)
sboost <- sampleboost_mod(
ndvi = ndvi_example,
ignorance = mrfi_reproj,
boundary = park,
nplot = 20,
areaplot = 400,
perm = 100
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("renv")
library(renv)
# Specify a CRAN snapshot date from 2022
renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
install.packages("renv")
library(renv)
# Specify a CRAN snapshot date from 2022
renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
library(renv)
renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
# Old (BROKEN): renv::init(restart = TRUE, settings = list(snapshot.type = "all", cran.repos = "https://mran.microsoft.com/snapshot/2022-01-31"))
# New (CORRECT): Use the Posit Public Package Manager (PPM) URL
# Note: R 4.1 is likely needed for spatial package compatibility with this date
renv::init(
restart = TRUE,
settings = list(
snapshot.type = "all",
cran.repos = "https://packagemanager.posit.co/cran/2022-01-31"
)
)
library(renv)
renv::init(
restart = TRUE,
settings = list(
snapshot.type = "all",
cran.repos = "https://packagemanager.posit.co/cran/2022-01-31"
)
)
# Option B: Try a later date (e.g., mid-2022)
renv::init(
restart = TRUE,
settings = list(
snapshot.type = "all",
cran.repos = "https://packagemanager.posit.co/cran/2022-06-01"
)
)
install.packages("remotes")
# 1. Install the 'checkpoint' package (if not already installed)
install.packages("checkpoint", repos = "https://cran.r-project.org")
# 2. Load the package
library(checkpoint)
# 3. Define the snapshot date
# This date is well within the R 4.1.2 window and before the major spatial package transitions.
snapshot_date <- "2021-12-01"
# 4. Use the checkpoint directory (ensure this path is accessible/writable)
checkpoint_dir <- file.path(getwd(), ".checkpoint_library_4.1.2")
# 5. Execute checkpoint() to set the local repository and library
# This step automatically creates an isolated library for the date specified.
# NOTE: This may take time as it downloads the archives and builds packages.
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
library(checkpoint)
snapshot_date <- "2021-12-01"
checkpoint_dir <- file.path(getwd(), ".checkpoint_library_4.1.2")
checkpoint(snapshot_date,
R_version = "4.1.2",
checkpointLocation = checkpoint_dir)
R.version.string
R.version.string
